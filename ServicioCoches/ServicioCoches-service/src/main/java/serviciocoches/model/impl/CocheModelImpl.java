/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package serviciocoches.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import serviciocoches.model.Coche;
import serviciocoches.model.CocheModel;
import serviciocoches.model.CocheSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Coche service. Represents a row in the &quot;FOO_Coche&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CocheModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CocheImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CocheImpl
 * @see Coche
 * @see CocheModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CocheModelImpl extends BaseModelImpl<Coche> implements CocheModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a coche model instance should use the {@link Coche} interface instead.
	 */
	public static final String TABLE_NAME = "FOO_Coche";
	public static final Object[][] TABLE_COLUMNS = {
			{ "Matricula", Types.VARCHAR },
			{ "Marca", Types.VARCHAR },
			{ "Modelo", Types.VARCHAR },
			{ "Precio", Types.DOUBLE },
			{ "PrecioConIva", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("Matricula", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Marca", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Modelo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Precio", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("PrecioConIva", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table FOO_Coche (Matricula VARCHAR(75) not null primary key,Marca VARCHAR(75) null,Modelo VARCHAR(75) null,Precio DOUBLE,PrecioConIva DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table FOO_Coche";
	public static final String ORDER_BY_JPQL = " ORDER BY coche.Matricula ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FOO_Coche.Matricula ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(serviciocoches.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.serviciocoches.model.Coche"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(serviciocoches.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.serviciocoches.model.Coche"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Coche toModel(CocheSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Coche model = new CocheImpl();

		model.setMatricula(soapModel.getMatricula());
		model.setMarca(soapModel.getMarca());
		model.setModelo(soapModel.getModelo());
		model.setPrecio(soapModel.getPrecio());
		model.setPrecioConIva(soapModel.getPrecioConIva());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Coche> toModels(CocheSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Coche> models = new ArrayList<Coche>(soapModels.length);

		for (CocheSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(serviciocoches.service.util.ServiceProps.get(
				"lock.expiration.time.serviciocoches.model.Coche"));

	public CocheModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _Matricula;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setMatricula(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Matricula;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Coche.class;
	}

	@Override
	public String getModelClassName() {
		return Coche.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Matricula", getMatricula());
		attributes.put("Marca", getMarca());
		attributes.put("Modelo", getModelo());
		attributes.put("Precio", getPrecio());
		attributes.put("PrecioConIva", getPrecioConIva());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String Matricula = (String)attributes.get("Matricula");

		if (Matricula != null) {
			setMatricula(Matricula);
		}

		String Marca = (String)attributes.get("Marca");

		if (Marca != null) {
			setMarca(Marca);
		}

		String Modelo = (String)attributes.get("Modelo");

		if (Modelo != null) {
			setModelo(Modelo);
		}

		Double Precio = (Double)attributes.get("Precio");

		if (Precio != null) {
			setPrecio(Precio);
		}

		Double PrecioConIva = (Double)attributes.get("PrecioConIva");

		if (PrecioConIva != null) {
			setPrecioConIva(PrecioConIva);
		}
	}

	@JSON
	@Override
	public String getMatricula() {
		if (_Matricula == null) {
			return StringPool.BLANK;
		}
		else {
			return _Matricula;
		}
	}

	@Override
	public void setMatricula(String Matricula) {
		_Matricula = Matricula;
	}

	@JSON
	@Override
	public String getMarca() {
		if (_Marca == null) {
			return StringPool.BLANK;
		}
		else {
			return _Marca;
		}
	}

	@Override
	public void setMarca(String Marca) {
		_Marca = Marca;
	}

	@JSON
	@Override
	public String getModelo() {
		if (_Modelo == null) {
			return StringPool.BLANK;
		}
		else {
			return _Modelo;
		}
	}

	@Override
	public void setModelo(String Modelo) {
		_Modelo = Modelo;
	}

	@JSON
	@Override
	public double getPrecio() {
		return _Precio;
	}

	@Override
	public void setPrecio(double Precio) {
		_Precio = Precio;
	}

	@JSON
	@Override
	public double getPrecioConIva() {
		return _PrecioConIva;
	}

	@Override
	public void setPrecioConIva(double PrecioConIva) {
		_PrecioConIva = PrecioConIva;
	}

	@Override
	public Coche toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Coche)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CocheImpl cocheImpl = new CocheImpl();

		cocheImpl.setMatricula(getMatricula());
		cocheImpl.setMarca(getMarca());
		cocheImpl.setModelo(getModelo());
		cocheImpl.setPrecio(getPrecio());
		cocheImpl.setPrecioConIva(getPrecioConIva());

		cocheImpl.resetOriginalValues();

		return cocheImpl;
	}

	@Override
	public int compareTo(Coche coche) {
		String primaryKey = coche.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Coche)) {
			return false;
		}

		Coche coche = (Coche)obj;

		String primaryKey = coche.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Coche> toCacheModel() {
		CocheCacheModel cocheCacheModel = new CocheCacheModel();

		cocheCacheModel.Matricula = getMatricula();

		String Matricula = cocheCacheModel.Matricula;

		if ((Matricula != null) && (Matricula.length() == 0)) {
			cocheCacheModel.Matricula = null;
		}

		cocheCacheModel.Marca = getMarca();

		String Marca = cocheCacheModel.Marca;

		if ((Marca != null) && (Marca.length() == 0)) {
			cocheCacheModel.Marca = null;
		}

		cocheCacheModel.Modelo = getModelo();

		String Modelo = cocheCacheModel.Modelo;

		if ((Modelo != null) && (Modelo.length() == 0)) {
			cocheCacheModel.Modelo = null;
		}

		cocheCacheModel.Precio = getPrecio();

		cocheCacheModel.PrecioConIva = getPrecioConIva();

		return cocheCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{Matricula=");
		sb.append(getMatricula());
		sb.append(", Marca=");
		sb.append(getMarca());
		sb.append(", Modelo=");
		sb.append(getModelo());
		sb.append(", Precio=");
		sb.append(getPrecio());
		sb.append(", PrecioConIva=");
		sb.append(getPrecioConIva());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("serviciocoches.model.Coche");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Matricula</column-name><column-value><![CDATA[");
		sb.append(getMatricula());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Marca</column-name><column-value><![CDATA[");
		sb.append(getMarca());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Modelo</column-name><column-value><![CDATA[");
		sb.append(getModelo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Precio</column-name><column-value><![CDATA[");
		sb.append(getPrecio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PrecioConIva</column-name><column-value><![CDATA[");
		sb.append(getPrecioConIva());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Coche.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Coche.class
		};
	private String _Matricula;
	private String _Marca;
	private String _Modelo;
	private double _Precio;
	private double _PrecioConIva;
	private Coche _escapedModel;
}